{"ast":null,"code":"var _jsxFileName = \"/Users/ishaantyagi/Desktop/sticky-notes-app/src/context/NotesContext.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { createContext } from 'react';\nimport { initialNotes } from '../utils/constants';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NotesContext = /*#__PURE__*/createContext();\nexport const NotesProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [notes, setNotes] = useState(initialNotes);\n  const [filteredNotes, setFilteredNotes] = useState([]); // a search filter to search for a keyword or sentence within the notes\n\n  const [searchValue, setSearchValue] = useState('');\n  useEffect(() => {\n    const updateFilteredNotes = () => {\n      const foundNotes = notes.filter(note => note.body === searchValue || note.body.includes(searchValue) || note.title === searchValue || note.title.includes(searchValue) || note.createdAt === searchValue || note.createdAt.includes(searchValue));\n      setFilteredNotes(foundNotes);\n    };\n\n    updateFilteredNotes();\n  }, [notes, searchValue]);\n  useEffect(() => {\n    const getSavedNotesFromLocalStorage = () => {\n      const ls = localStorage;\n      const savedNotes = ls.getItem('notes');\n\n      if (savedNotes) {\n        const parsedNotes = JSON.parse(savedNotes);\n        setNotes(parsedNotes);\n      }\n    };\n\n    getSavedNotesFromLocalStorage();\n  }, []);\n  useEffect(() => {\n    const setNotesInLocalStorage = () => {\n      const ls = localStorage;\n      const stringifiedNotes = JSON.stringify(notes);\n      ls.setItem('notes', stringifiedNotes);\n    };\n\n    setNotesInLocalStorage();\n  }, [notes]);\n\n  const searchValueOnChange = e => {\n    setSearchValue(e.target.value);\n  };\n\n  const handleAddNote = () => {\n    const d = new Date();\n    const newNote = {\n      id: nanoid(),\n      title: `New note`,\n      body: '',\n      createdAt: `${d.toLocaleDateString('es-VE')}`\n    };\n    const newNotes = [...notes, newNote];\n    setNotes(newNotes);\n  };\n\n  const handleChangeNoteData = (e, noteId) => {\n    const {\n      target\n    } = e;\n    const {\n      name,\n      value\n    } = target;\n    const noteIndex = notes.findIndex(note => note.id === noteId);\n    let currentNote = Object.assign({}, notes[noteIndex]);\n    currentNote[name] = value;\n    const newNotes = [...notes];\n    newNotes.splice(noteIndex, 1, currentNote);\n    setNotes(newNotes);\n  };\n\n  const handleDeleteNote = noteId => {\n    const index = notes.findIndex(note => note.id === noteId);\n    const newNotes = [...notes];\n    newNotes.splice(index, 1);\n    setNotes(newNotes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NotesContext.Provider, {\n    value: {\n      notes,\n      setNotes,\n      filteredNotes,\n      handleAddNote,\n      handleChangeNoteData,\n      handleDeleteNote,\n      searchValue,\n      setSearchValue,\n      searchValueOnChange\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NotesProvider, \"9ivmEkXXBc1oeJ88xjsQ2WLrAXw=\");\n\n_c = NotesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotesProvider\");","map":{"version":3,"names":["useEffect","useState","createContext","initialNotes","nanoid","NotesContext","NotesProvider","children","notes","setNotes","filteredNotes","setFilteredNotes","searchValue","setSearchValue","updateFilteredNotes","foundNotes","filter","note","body","includes","title","createdAt","getSavedNotesFromLocalStorage","ls","localStorage","savedNotes","getItem","parsedNotes","JSON","parse","setNotesInLocalStorage","stringifiedNotes","stringify","setItem","searchValueOnChange","e","target","value","handleAddNote","d","Date","newNote","id","toLocaleDateString","newNotes","handleChangeNoteData","noteId","name","noteIndex","findIndex","currentNote","Object","assign","splice","handleDeleteNote","index"],"sources":["/Users/ishaantyagi/Desktop/sticky-notes-app/src/context/NotesContext.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { createContext } from 'react';\nimport { initialNotes } from '../utils/constants';\nimport { nanoid } from 'nanoid';\n\nexport const NotesContext = createContext();\n\nexport const NotesProvider = ({ children }) => {\n  const [notes, setNotes] = useState(initialNotes);\n  const [filteredNotes, setFilteredNotes] = useState([]);\n  // a search filter to search for a keyword or sentence within the notes\n  const [searchValue, setSearchValue] = useState('');\n\n  useEffect(() => {\n    const updateFilteredNotes = () => {\n      const foundNotes = notes.filter(\n        (note) =>\n          note.body === searchValue ||\n          note.body.includes(searchValue) ||\n          note.title === searchValue ||\n          note.title.includes(searchValue) ||\n          note.createdAt === searchValue ||\n          note.createdAt.includes(searchValue)\n      );\n\n      setFilteredNotes(foundNotes);\n    };\n\n    updateFilteredNotes();\n  }, [notes, searchValue]);\n\n  useEffect(() => {\n    const getSavedNotesFromLocalStorage = () => {\n      const ls = localStorage;\n      const savedNotes = ls.getItem('notes');\n      if (savedNotes) {\n        const parsedNotes = JSON.parse(savedNotes);\n        setNotes(parsedNotes);\n      }\n    };\n\n    getSavedNotesFromLocalStorage();\n  }, []);\n\n  useEffect(() => {\n    const setNotesInLocalStorage = () => {\n      const ls = localStorage;\n      const stringifiedNotes = JSON.stringify(notes);\n      ls.setItem('notes', stringifiedNotes);\n    };\n\n    setNotesInLocalStorage();\n  }, [notes]);\n\n  const searchValueOnChange = (e) => {\n    setSearchValue(e.target.value);\n  };\n\n  const handleAddNote = () => {\n    const d = new Date();\n\n    const newNote = {\n      id: nanoid(),\n      title: `New note`,\n      body: '',\n      createdAt: `${d.toLocaleDateString('es-VE')}`,\n    };\n\n    const newNotes = [...notes, newNote];\n    setNotes(newNotes);\n  };\n\n  const handleChangeNoteData = (e, noteId) => {\n    const { target } = e;\n    const { name, value } = target;\n\n    const noteIndex = notes.findIndex((note) => note.id === noteId);\n    let currentNote = Object.assign({}, notes[noteIndex]);\n    currentNote[name] = value;\n\n    const newNotes = [...notes];\n    newNotes.splice(noteIndex, 1, currentNote);\n    setNotes(newNotes);\n  };\n\n  const handleDeleteNote = (noteId) => {\n    const index = notes.findIndex((note) => note.id === noteId);\n    const newNotes = [...notes];\n    newNotes.splice(index, 1);\n    setNotes(newNotes);\n  };\n\n  return (\n    <NotesContext.Provider\n      value={{\n        notes,\n        setNotes,\n        filteredNotes,\n\n        handleAddNote,\n        handleChangeNoteData,\n        handleDeleteNote,\n\n        searchValue,\n        setSearchValue,\n        searchValueOnChange,\n      }}\n    >\n      {children}\n    </NotesContext.Provider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}